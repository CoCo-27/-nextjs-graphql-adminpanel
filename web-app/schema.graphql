"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
    """
    When true, the client will never use the cache for this value. See
    https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
    """
    always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
    """
    The variable name to export this field as.
    """
    as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
    """
    Specify the store key.
    """
    key: String!

    """
    An array of query argument names to include in the generated custom store key.
    """
    filter: [String!]
) on FIELD

input BooleanFilter {
    equals: Boolean
    not: Boolean
}

input CartItemCreateManyWithoutProductInput {
    connect: [CartItemWhereUniqueInput!]
    create: [CartItemCreateWithoutProductInput!]
}

input CartItemCreateManyWithoutUserInput {
    connect: [CartItemWhereUniqueInput!]
    create: [CartItemCreateWithoutUserInput!]
}

input CartItemCreateWithoutProductInput {
    id: String!
    item: String!
    quantity: Int!
    User: UserCreateOneWithoutCartItemInput!
}

input CartItemCreateWithoutUserInput {
    id: String!
    item: String!
    Product: ProductCreateOneWithoutCartItemInput
    quantity: Int!
}

input CartItemFilter {
    every: CartItemWhereInput
    none: CartItemWhereInput
    some: CartItemWhereInput
}

input CartItemScalarWhereInput {
    AND: [CartItemScalarWhereInput!]
    id: StringFilter
    item: StringFilter
    NOT: [CartItemScalarWhereInput!]
    OR: [CartItemScalarWhereInput!]
    productId: NullableStringFilter
    quantity: IntFilter
    user: StringFilter
}

input CartItemUpdateManyDataInput {
    id: String
    item: String
    quantity: Int
}

input CartItemUpdateManyWithoutProductInput {
    connect: [CartItemWhereUniqueInput!]
    create: [CartItemCreateWithoutProductInput!]
    delete: [CartItemWhereUniqueInput!]
    deleteMany: [CartItemScalarWhereInput!]
    disconnect: [CartItemWhereUniqueInput!]
    set: [CartItemWhereUniqueInput!]
    update: [CartItemUpdateWithWhereUniqueWithoutProductInput!]
    updateMany: [CartItemUpdateManyWithWhereNestedInput!]
    upsert: [CartItemUpsertWithWhereUniqueWithoutProductInput!]
}

input CartItemUpdateManyWithoutUserInput {
    connect: [CartItemWhereUniqueInput!]
    create: [CartItemCreateWithoutUserInput!]
    delete: [CartItemWhereUniqueInput!]
    deleteMany: [CartItemScalarWhereInput!]
    disconnect: [CartItemWhereUniqueInput!]
    set: [CartItemWhereUniqueInput!]
    update: [CartItemUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [CartItemUpdateManyWithWhereNestedInput!]
    upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
    data: CartItemUpdateManyDataInput!
    where: CartItemScalarWhereInput!
}

input CartItemUpdateWithoutProductDataInput {
    id: String
    item: String
    quantity: Int
    User: UserUpdateOneRequiredWithoutCartItemInput
}

input CartItemUpdateWithoutUserDataInput {
    id: String
    item: String
    Product: ProductUpdateOneWithoutCartItemInput
    quantity: Int
}

input CartItemUpdateWithWhereUniqueWithoutProductInput {
    data: CartItemUpdateWithoutProductDataInput!
    where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
    data: CartItemUpdateWithoutUserDataInput!
    where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutProductInput {
    create: CartItemCreateWithoutProductInput!
    update: CartItemUpdateWithoutProductDataInput!
    where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
    create: CartItemCreateWithoutUserInput!
    update: CartItemUpdateWithoutUserDataInput!
    where: CartItemWhereUniqueInput!
}

input CartItemWhereInput {
    AND: [CartItemWhereInput!]
    id: StringFilter
    item: StringFilter
    NOT: [CartItemWhereInput!]
    OR: [CartItemWhereInput!]
    Product: ProductWhereInput
    productId: NullableStringFilter
    quantity: IntFilter
    user: StringFilter
    User: UserWhereInput
}

input CartItemWhereUniqueInput {
    id: String
}

type Category {
    createdAt: DateTime!
    id: String!
    name: String!
    parent: String!
    slug: String!
    updatedAt: DateTime!
}

input CategoryCreateOneWithoutProductInput {
    connect: CategoryWhereUniqueInput
    create: CategoryCreateWithoutProductInput
}

input CategoryCreateWithoutProductInput {
    createdAt: DateTime
    id: String
    name: String!
    parent: String!
    slug: String!
    updatedAt: DateTime
}

type CategoryEdge {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
    """
    cursor: String!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Node
    """
    node: Category!
}

input CategoryUpdateOneRequiredWithoutProductInput {
    connect: CategoryWhereUniqueInput
    create: CategoryCreateWithoutProductInput
    update: CategoryUpdateWithoutProductDataInput
    upsert: CategoryUpsertWithoutProductInput
}

input CategoryUpdateWithoutProductDataInput {
    createdAt: DateTime
    id: String
    name: String
    parent: String
    slug: String
    updatedAt: DateTime
}

input CategoryUpsertWithoutProductInput {
    create: CategoryCreateWithoutProductInput!
    update: CategoryUpdateWithoutProductDataInput!
}

input CategoryWhereInput {
    AND: [CategoryWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    name: StringFilter
    NOT: [CategoryWhereInput!]
    OR: [CategoryWhereInput!]
    parent: StringFilter
    Product: ProductFilter
    slug: StringFilter
    updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
    id: String
    slug: String
}

scalar DateTime

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: DateTime
    notIn: [DateTime!]
}

type GoogleMapsLocation {
    googlePlacesId: String!
    id: String!
    name: String!
}

input GoogleMapsLocationCreateInput {
    googlePlacesId: String!
    id: String
    name: String!
    OrderDetail: OrderDetailCreateManyWithoutGoogleMapsLocationInput
}

input GoogleMapsLocationCreateOneWithoutOrderDetailInput {
    connect: GoogleMapsLocationWhereUniqueInput
    create: GoogleMapsLocationCreateWithoutOrderDetailInput
}

input GoogleMapsLocationCreateWithoutOrderDetailInput {
    googlePlacesId: String!
    id: String
    name: String!
}

input GoogleMapsLocationUpdateInput {
    googlePlacesId: String
    id: String
    name: String
    OrderDetail: OrderDetailUpdateManyWithoutGoogleMapsLocationInput
}

input GoogleMapsLocationUpdateOneWithoutOrderDetailInput {
    connect: GoogleMapsLocationWhereUniqueInput
    create: GoogleMapsLocationCreateWithoutOrderDetailInput
    delete: Boolean
    disconnect: Boolean
    update: GoogleMapsLocationUpdateWithoutOrderDetailDataInput
    upsert: GoogleMapsLocationUpsertWithoutOrderDetailInput
}

input GoogleMapsLocationUpdateWithoutOrderDetailDataInput {
    googlePlacesId: String
    id: String
    name: String
}

input GoogleMapsLocationUpsertWithoutOrderDetailInput {
    create: GoogleMapsLocationCreateWithoutOrderDetailInput!
    update: GoogleMapsLocationUpdateWithoutOrderDetailDataInput!
}

input GoogleMapsLocationWhereInput {
    AND: [GoogleMapsLocationWhereInput!]
    googlePlacesId: StringFilter
    id: StringFilter
    name: StringFilter
    NOT: [GoogleMapsLocationWhereInput!]
    OR: [GoogleMapsLocationWhereInput!]
    OrderDetail: OrderDetailFilter
}

input GoogleMapsLocationWhereUniqueInput {
    id: String
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

type Mutation {
    completeOnboarding: Boolean!
    createCategory(name: String!, parent: String!, slug: String!): Category!
    createProduct(
        categoryId: ID!
        description: String!
        discount: Int!
        images: [ProductImageCreateWithoutProductInput!]!
        name: String!
        price: Int!
        salePrice: Int!
        sku: String!
        unit: String!
    ): Product!
    createUser(data: GoogleMapsLocationCreateInput!): GoogleMapsLocation!
    deleteAccount(id: ID!): User!
    deleteCategory(id: ID!): Category!
    login(email: String!, password: String!): User!
    logout: Boolean!
    requestPasswordReset(email: String): Boolean!
    resetPassword(
        confirmPassword: String
        password: String
        resetToken: String
    ): User!
    signup(
        confirmPassword: String
        email: String
        name: String
        password: String
    ): User!
    updateCategory(
        id: ID!
        name: String
        parent: String
        slug: String
    ): Category!
    updateProduct(
        categoryId: ID!
        description: String!
        discount: Int!
        id: String!
        images: [ProductImageCreateWithoutProductInput!]!
        name: String!
        price: Int!
        salePrice: Int!
        sku: String!
        unit: String!
    ): Product!
    updateUser(id: ID!, name: String, role: String, status: String): User!
}

input NullableBooleanFilter {
    equals: Boolean
    not: Boolean
}

input NullableFloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: Float
    notIn: [Float!]
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

enum OrderByArg {
    asc
    desc
}

input OrderDetailCreateManyWithoutGoogleMapsLocationInput {
    connect: [OrderDetailWhereUniqueInput!]
    create: [OrderDetailCreateWithoutGoogleMapsLocationInput!]
}

input OrderDetailCreateManyWithoutUserInput {
    connect: [OrderDetailWhereUniqueInput!]
    create: [OrderDetailCreateWithoutUserInput!]
}

input OrderDetailCreateWithoutGoogleMapsLocationInput {
    id: String
    User: UserCreateOneWithoutOrderDetailInput
}

input OrderDetailCreateWithoutUserInput {
    GoogleMapsLocation: GoogleMapsLocationCreateOneWithoutOrderDetailInput
    id: String
}

input OrderDetailFilter {
    every: OrderDetailWhereInput
    none: OrderDetailWhereInput
    some: OrderDetailWhereInput
}

input OrderDetailScalarWhereInput {
    AND: [OrderDetailScalarWhereInput!]
    googleMapsLocationId: NullableStringFilter
    id: StringFilter
    NOT: [OrderDetailScalarWhereInput!]
    OR: [OrderDetailScalarWhereInput!]
    userId: NullableStringFilter
}

input OrderDetailUpdateManyDataInput {
    id: String
}

input OrderDetailUpdateManyWithoutGoogleMapsLocationInput {
    connect: [OrderDetailWhereUniqueInput!]
    create: [OrderDetailCreateWithoutGoogleMapsLocationInput!]
    delete: [OrderDetailWhereUniqueInput!]
    deleteMany: [OrderDetailScalarWhereInput!]
    disconnect: [OrderDetailWhereUniqueInput!]
    set: [OrderDetailWhereUniqueInput!]
    update: [OrderDetailUpdateWithWhereUniqueWithoutGoogleMapsLocationInput!]
    updateMany: [OrderDetailUpdateManyWithWhereNestedInput!]
    upsert: [OrderDetailUpsertWithWhereUniqueWithoutGoogleMapsLocationInput!]
}

input OrderDetailUpdateManyWithoutUserInput {
    connect: [OrderDetailWhereUniqueInput!]
    create: [OrderDetailCreateWithoutUserInput!]
    delete: [OrderDetailWhereUniqueInput!]
    deleteMany: [OrderDetailScalarWhereInput!]
    disconnect: [OrderDetailWhereUniqueInput!]
    set: [OrderDetailWhereUniqueInput!]
    update: [OrderDetailUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [OrderDetailUpdateManyWithWhereNestedInput!]
    upsert: [OrderDetailUpsertWithWhereUniqueWithoutUserInput!]
}

input OrderDetailUpdateManyWithWhereNestedInput {
    data: OrderDetailUpdateManyDataInput!
    where: OrderDetailScalarWhereInput!
}

input OrderDetailUpdateWithoutGoogleMapsLocationDataInput {
    id: String
    User: UserUpdateOneWithoutOrderDetailInput
}

input OrderDetailUpdateWithoutUserDataInput {
    GoogleMapsLocation: GoogleMapsLocationUpdateOneWithoutOrderDetailInput
    id: String
}

input OrderDetailUpdateWithWhereUniqueWithoutGoogleMapsLocationInput {
    data: OrderDetailUpdateWithoutGoogleMapsLocationDataInput!
    where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpdateWithWhereUniqueWithoutUserInput {
    data: OrderDetailUpdateWithoutUserDataInput!
    where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpsertWithWhereUniqueWithoutGoogleMapsLocationInput {
    create: OrderDetailCreateWithoutGoogleMapsLocationInput!
    update: OrderDetailUpdateWithoutGoogleMapsLocationDataInput!
    where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpsertWithWhereUniqueWithoutUserInput {
    create: OrderDetailCreateWithoutUserInput!
    update: OrderDetailUpdateWithoutUserDataInput!
    where: OrderDetailWhereUniqueInput!
}

input OrderDetailWhereInput {
    AND: [OrderDetailWhereInput!]
    GoogleMapsLocation: GoogleMapsLocationWhereInput
    googleMapsLocationId: NullableStringFilter
    id: StringFilter
    NOT: [OrderDetailWhereInput!]
    OR: [OrderDetailWhereInput!]
    User: UserWhereInput
    userId: NullableStringFilter
}

input OrderDetailWhereUniqueInput {
    id: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
    """
    The cursor corresponding to the last nodes in edges. Null if the connection is empty.
    """
    endCursor: String

    """
    Used to indicate whether more edges exist following the set defined by the clients arguments.
    """
    hasNextPage: Boolean!

    """
    Used to indicate whether more edges exist prior to the set defined by the clients arguments.
    """
    hasPreviousPage: Boolean!

    """
    The cursor corresponding to the first nodes in edges. Null if the connection is empty.
    """
    startCursor: String
}

type Product {
    Category: Category!
    createdAt: DateTime!
    description: String!
    discount: Int!
    id: String!
    name: String!
    price: Int!
    ProductImages(
        after: ProductImageWhereUniqueInput
        before: ProductImageWhereUniqueInput
        first: Int
        last: Int
        orderBy: ProductProductImagesOrderByInput
        skip: Int
    ): [ProductImage!]!
    salePrice: Int!
    sku: String!
    unit: String!
    updatedAt: DateTime!
    User: User!
}

input ProductCreateManyWithoutUserInput {
    connect: [ProductWhereUniqueInput!]
    create: [ProductCreateWithoutUserInput!]
}

input ProductCreateOneWithoutCartItemInput {
    connect: ProductWhereUniqueInput
    create: ProductCreateWithoutCartItemInput
}

input ProductCreateWithoutCartItemInput {
    Category: CategoryCreateOneWithoutProductInput!
    createdAt: DateTime
    description: String!
    discount: Int!
    id: String
    name: String!
    price: Int!
    ProductImages: ProductImageCreateManyWithoutProductInput
    salePrice: Int!
    sku: String!
    unit: String!
    updatedAt: DateTime
    User: UserCreateOneWithoutProductInput!
}

input ProductCreateWithoutUserInput {
    CartItem: CartItemCreateManyWithoutProductInput
    Category: CategoryCreateOneWithoutProductInput!
    createdAt: DateTime
    description: String!
    discount: Int!
    id: String
    name: String!
    price: Int!
    ProductImages: ProductImageCreateManyWithoutProductInput
    salePrice: Int!
    sku: String!
    unit: String!
    updatedAt: DateTime
}

type ProductEdge {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
    """
    cursor: String!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Node
    """
    node: Product!
}

input ProductFilter {
    every: ProductWhereInput
    none: ProductWhereInput
    some: ProductWhereInput
}

type ProductImage {
    createdAt: DateTime!
    id: String!
    image: String!
    Product: Product!
    productId: String!
    updatedAt: DateTime!
}

input ProductImageCreateManyWithoutProductInput {
    connect: [ProductImageWhereUniqueInput!]
    create: [ProductImageCreateWithoutProductInput!]
}

input ProductImageCreateWithoutProductInput {
    createdAt: DateTime
    id: String
    image: String!
    updatedAt: DateTime
}

input ProductImageFilter {
    every: ProductImageWhereInput
    none: ProductImageWhereInput
    some: ProductImageWhereInput
}

input ProductImageScalarWhereInput {
    AND: [ProductImageScalarWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    image: StringFilter
    NOT: [ProductImageScalarWhereInput!]
    OR: [ProductImageScalarWhereInput!]
    productId: StringFilter
    updatedAt: DateTimeFilter
}

input ProductImageUpdateManyDataInput {
    createdAt: DateTime
    id: String
    image: String
    updatedAt: DateTime
}

input ProductImageUpdateManyWithoutProductInput {
    connect: [ProductImageWhereUniqueInput!]
    create: [ProductImageCreateWithoutProductInput!]
    delete: [ProductImageWhereUniqueInput!]
    deleteMany: [ProductImageScalarWhereInput!]
    disconnect: [ProductImageWhereUniqueInput!]
    set: [ProductImageWhereUniqueInput!]
    update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
    updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
    upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
    data: ProductImageUpdateManyDataInput!
    where: ProductImageScalarWhereInput!
}

input ProductImageUpdateWithoutProductDataInput {
    createdAt: DateTime
    id: String
    image: String
    updatedAt: DateTime
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
    data: ProductImageUpdateWithoutProductDataInput!
    where: ProductImageWhereUniqueInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
    create: ProductImageCreateWithoutProductInput!
    update: ProductImageUpdateWithoutProductDataInput!
    where: ProductImageWhereUniqueInput!
}

input ProductImageWhereInput {
    AND: [ProductImageWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    image: StringFilter
    NOT: [ProductImageWhereInput!]
    OR: [ProductImageWhereInput!]
    Product: ProductWhereInput
    productId: StringFilter
    updatedAt: DateTimeFilter
}

input ProductImageWhereUniqueInput {
    id: String
}

input ProductOrderByInput {
    name: OrderByArg
    price: OrderByArg
    updatedAt: OrderByArg
}

input ProductProductImagesOrderByInput {
    createdAt: OrderByArg
}

input ProductScalarWhereInput {
    AND: [ProductScalarWhereInput!]
    CartItem: CartItemFilter
    category: StringFilter
    createdAt: DateTimeFilter
    description: StringFilter
    discount: IntFilter
    id: StringFilter
    name: StringFilter
    NOT: [ProductScalarWhereInput!]
    OR: [ProductScalarWhereInput!]
    price: IntFilter
    ProductImages: ProductImageFilter
    salePrice: IntFilter
    sku: StringFilter
    unit: StringFilter
    updatedAt: DateTimeFilter
    user: StringFilter
}

input ProductUpdateManyDataInput {
    createdAt: DateTime
    description: String
    discount: Int
    id: String
    name: String
    price: Int
    salePrice: Int
    sku: String
    unit: String
    updatedAt: DateTime
}

input ProductUpdateManyWithoutUserInput {
    connect: [ProductWhereUniqueInput!]
    create: [ProductCreateWithoutUserInput!]
    delete: [ProductWhereUniqueInput!]
    deleteMany: [ProductScalarWhereInput!]
    disconnect: [ProductWhereUniqueInput!]
    set: [ProductWhereUniqueInput!]
    update: [ProductUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [ProductUpdateManyWithWhereNestedInput!]
    upsert: [ProductUpsertWithWhereUniqueWithoutUserInput!]
}

input ProductUpdateManyWithWhereNestedInput {
    data: ProductUpdateManyDataInput!
    where: ProductScalarWhereInput!
}

input ProductUpdateOneWithoutCartItemInput {
    connect: ProductWhereUniqueInput
    create: ProductCreateWithoutCartItemInput
    delete: Boolean
    disconnect: Boolean
    update: ProductUpdateWithoutCartItemDataInput
    upsert: ProductUpsertWithoutCartItemInput
}

input ProductUpdateWithoutCartItemDataInput {
    Category: CategoryUpdateOneRequiredWithoutProductInput
    createdAt: DateTime
    description: String
    discount: Int
    id: String
    name: String
    price: Int
    ProductImages: ProductImageUpdateManyWithoutProductInput
    salePrice: Int
    sku: String
    unit: String
    updatedAt: DateTime
    User: UserUpdateOneRequiredWithoutProductInput
}

input ProductUpdateWithoutUserDataInput {
    CartItem: CartItemUpdateManyWithoutProductInput
    Category: CategoryUpdateOneRequiredWithoutProductInput
    createdAt: DateTime
    description: String
    discount: Int
    id: String
    name: String
    price: Int
    ProductImages: ProductImageUpdateManyWithoutProductInput
    salePrice: Int
    sku: String
    unit: String
    updatedAt: DateTime
}

input ProductUpdateWithWhereUniqueWithoutUserInput {
    data: ProductUpdateWithoutUserDataInput!
    where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutCartItemInput {
    create: ProductCreateWithoutCartItemInput!
    update: ProductUpdateWithoutCartItemDataInput!
}

input ProductUpsertWithWhereUniqueWithoutUserInput {
    create: ProductCreateWithoutUserInput!
    update: ProductUpdateWithoutUserDataInput!
    where: ProductWhereUniqueInput!
}

input ProductWhereInput {
    AND: [ProductWhereInput!]
    CartItem: CartItemFilter
    category: StringFilter
    Category: CategoryWhereInput
    createdAt: DateTimeFilter
    description: StringFilter
    discount: IntFilter
    id: StringFilter
    name: StringFilter
    NOT: [ProductWhereInput!]
    OR: [ProductWhereInput!]
    price: IntFilter
    ProductImages: ProductImageFilter
    salePrice: IntFilter
    sku: StringFilter
    unit: StringFilter
    updatedAt: DateTimeFilter
    user: StringFilter
    User: UserWhereInput
}

input ProductWhereUniqueInput {
    id: String
    sku: String
}

type Query {
    categories(
        """
        Returns the elements in the list that come after the specified cursor
        """
        after: String

        """
        Returns the first n elements from the list.
        """
        first: Int!
        nameQuery: String
        orderBy: QueryCategoriesOrderByInput
        parentQuery: String
        skip: Int
        where: CategoryWhereUniqueInput
    ): QueryCategories_Connection!
    me: User
    products(
        """
        Returns the elements in the list that come after the specified cursor
        """
        after: String
        discountRange: String

        """
        Returns the first n elements from the list.
        """
        first: Int!
        nameQuery: String
        orderBy: ProductOrderByInput
        skip: Int
        where: ProductWhereUniqueInput
    ): QueryProducts_Connection!
    users(
        """
        Returns the elements in the list that come after the specified cursor
        """
        after: String

        """
        Returns the first n elements from the list.
        """
        first: Int!
        nameQuery: String
        orderBy: QueryUsersOrderByInput
        skip: Int
        where: UserWhereUniqueInput
    ): QueryUsers_Connection!
    isLeftDrawerOpen: Boolean!
    snackMsg: String
    snackType: String
    snackBarOpen: Boolean
}

type QueryCategories_Connection {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
    """
    edges: [CategoryEdge]

    """
    Flattened list of Category type
    """
    nodes: [Category!]!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
    """
    pageInfo: PageInfo!
    totalCount: Int!
}

input QueryCategoriesOrderByInput {
    name: OrderByArg
    updatedAt: OrderByArg
}

type QueryProducts_Connection {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
    """
    edges: [ProductEdge]

    """
    Flattened list of Product type
    """
    nodes: [Product!]!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
    """
    pageInfo: PageInfo!
    totalCount: Int!
}

input QueryProductsOrderByInput {
    name: OrderByArg
    updatedAt: OrderByArg
}

type QueryUsers_Connection {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
    """
    edges: [UserEdge]

    """
    Flattened list of User type
    """
    nodes: [User!]!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
    """
    pageInfo: PageInfo!
    totalCount: Int!
}

input QueryUsersOrderByInput {
    name: OrderByArg
    status: OrderByArg
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
    email: String!
    hasCompletedOnboarding: Boolean!
    hasVerifiedEmail: Boolean
    id: String!
    name: String!
    role: User_role!
    status: User_status!
}

enum User_role {
    ADMIN
    MANAGER
    USER
}

enum User_status {
    ACTIVE
    BLOCKED
    INACTIVE
}

input UserCreateOneWithoutCartItemInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutCartItemInput
}

input UserCreateOneWithoutOrderDetailInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutOrderDetailInput
}

input UserCreateOneWithoutProductInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutProductInput
}

input UserCreateWithoutCartItemInput {
    billing: String
    email: String!
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String!
    OrderDetail: OrderDetailCreateManyWithoutUserInput
    password: String
    Product: ProductCreateManyWithoutUserInput
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

input UserCreateWithoutOrderDetailInput {
    billing: String
    CartItem: CartItemCreateManyWithoutUserInput
    email: String!
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String!
    password: String
    Product: ProductCreateManyWithoutUserInput
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

input UserCreateWithoutProductInput {
    billing: String
    CartItem: CartItemCreateManyWithoutUserInput
    email: String!
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String!
    OrderDetail: OrderDetailCreateManyWithoutUserInput
    password: String
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

type UserEdge {
    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
    """
    cursor: String!

    """
    https://facebook.github.io/relay/graphql/connections.htm#sec-Node
    """
    node: User!
}

input UserUpdateOneRequiredWithoutCartItemInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutCartItemInput
    update: UserUpdateWithoutCartItemDataInput
    upsert: UserUpsertWithoutCartItemInput
}

input UserUpdateOneRequiredWithoutProductInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutProductInput
    update: UserUpdateWithoutProductDataInput
    upsert: UserUpsertWithoutProductInput
}

input UserUpdateOneWithoutOrderDetailInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutOrderDetailInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutOrderDetailDataInput
    upsert: UserUpsertWithoutOrderDetailInput
}

input UserUpdateWithoutCartItemDataInput {
    billing: String
    email: String
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String
    OrderDetail: OrderDetailUpdateManyWithoutUserInput
    password: String
    Product: ProductUpdateManyWithoutUserInput
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

input UserUpdateWithoutOrderDetailDataInput {
    billing: String
    CartItem: CartItemUpdateManyWithoutUserInput
    email: String
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String
    password: String
    Product: ProductUpdateManyWithoutUserInput
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

input UserUpdateWithoutProductDataInput {
    billing: String
    CartItem: CartItemUpdateManyWithoutUserInput
    email: String
    emailConfirmationToken: String
    googleId: String
    hasCompletedOnboarding: Boolean
    hasVerifiedEmail: Boolean
    id: String
    name: String
    OrderDetail: OrderDetailUpdateManyWithoutUserInput
    password: String
    resetToken: String
    resetTokenExpiry: Float
    role: User_role
    status: User_status
}

input UserUpsertWithoutCartItemInput {
    create: UserCreateWithoutCartItemInput!
    update: UserUpdateWithoutCartItemDataInput!
}

input UserUpsertWithoutOrderDetailInput {
    create: UserCreateWithoutOrderDetailInput!
    update: UserUpdateWithoutOrderDetailDataInput!
}

input UserUpsertWithoutProductInput {
    create: UserCreateWithoutProductInput!
    update: UserUpdateWithoutProductDataInput!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    billing: NullableStringFilter
    CartItem: CartItemFilter
    email: StringFilter
    emailConfirmationToken: NullableStringFilter
    googleId: NullableStringFilter
    hasCompletedOnboarding: BooleanFilter
    hasVerifiedEmail: NullableBooleanFilter
    id: StringFilter
    name: StringFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    OrderDetail: OrderDetailFilter
    password: NullableStringFilter
    Product: ProductFilter
    resetToken: NullableStringFilter
    resetTokenExpiry: NullableFloatFilter
    role: User_role
    status: User_status
}

input UserWhereUniqueInput {
    email: String
    googleId: String
    id: String
}
